anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
head(anal,10)
head(kern,10)
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
kern=c(header,kern)
for(i in 1:6){
if(length(grep('\\*',kern[i]))>0 & length(grep('\\*\\*',anal[i,1]))==0 & kern[i]!=anal[i,1]) {
print(kern[i])
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
head(kern,10)
head(anal,10)
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
kern=c(header,kern)
for(i in 1:length(kern)){
if(length(grep('\\*',kern[i]))>0 & length(grep('\\*\\*',anal[i,1]))==0 & kern[i]!=anal[i,1]) {
print(kern[i])
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
kern=c(header,kern)
adds=0
for(i in 1:length(kern)){
if(length(grep('\\*',kern[i]))>0 & length(grep('\\*\\*',anal[i+adds,1]))==0 & kern[i]!=anal[i+adds,1]) {
print(kern[i])
adds=adds+1
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
kern=c(header,kern)
kern
cbind(head(kern,50),head(anal,50))
cbind(head(kern,10),head(anal,10))
adds=0
for(i in 1:length(kern)){
if(length(grep('\\*',kern[i]))>0 & length(grep('\\*\\*',kern[i]]))==0 & kern[i]!=anal[i+adds,1]) {
print(kern[i])
adds=adds+1
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
kern=c(header,kern)
adds=0
for(i in 1:length(kern)){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]]))==0 & kern[i]!=anal[i+adds,1]) {
print(kern[i])
adds=adds+1
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
kern=c(header,kern)
adds=0
for(i in 1:length(kern)){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i+adds,1]) {
print(kern[i])
adds=adds+1
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
cbind(head(kern,10),head(anal,10))
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
kern=c(header,kern)
adds=0
for(i in 5){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i+adds,1]) {
print(kern[i])
adds=adds+1
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
cbind(head(kern,10),head(anal,10))
for(i in 6){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i+adds,1]) {
print(kern[i])
adds=adds+1
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
cbind(head(kern,10),head(anal,10))
adds
for(i in 7){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i,1]) {
print(kern[i])
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
cbind(head(kern,10),head(anal,10))
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
kern=c(header,kern)
for(i in 7){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i,1]) {
print(kern[i])
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
cbind(head(kern,10),head(anal,10))
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
kern=c(header,kern)
for(i in 7){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i,1]) {
print(kern[i])
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
cbind(head(kern,10),head(anal,10))
anal=read.delim('anal',header=F,skip=N,as.is=T)
anal
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,skip=N,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
#   kern=c(header,kern)
cbind(head(kern,10),head(anal,10))
#   kern=c(header,kern)
for(i in 7){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i,1]) {
print(kern[i])
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
cbind(head(kern,10),head(anal,10))
for(i in 7){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i,1]) {
print(kern[i])
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
kern[1]
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,skip=N,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
#   kern=c(header,kern)
for(i in 1:length(kern)){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i,1]) {
print(kern[i])
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
cbind(head(kern,10),head(anal,10))
cbind(head(kern,20),head(anal,20))
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,skip=N,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
#   kern=c(header,kern)
for(i in 1:length(kern)){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i,1]) {
print(kern[i])
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
cbind(head(kern,20),head(anal,20))
file
source('~/Dropbox/laitzProject/conversion/cm/practice/Align.R', echo=TRUE)
header
N
N=suppressWarnings(det.N('anal'))
N
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,skip=N,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
kern
anal
for(i in 1:length(kern)){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i,1]) {
print(kern[i])
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
kern
data.frame(anal,kern)
cbind(head(kern),head(anal))
cbind(head(kern,40),head(anal,40))
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,skip=N,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
#   kern=c(header,kern)
for(i in 1:length(kern)){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i,1]) {
print(kern[i])
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
cbind(head(kern,40),head(anal,40))
head(anal,10)
head(kern,10)
cbind(head(kern,10),head(anal,10))
cbind(head(kern,15),head(anal,15))
N=suppressWarnings(det.N('anal'))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,skip=N,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
#   kern=c(header,kern)
for(i in 1:length(kern)){
if(length(grep('^\\*',kern[i]))>0 & length(grep('^\\*\\*',kern[i]))==0 & kern[i]!=anal[i,1]) {
print(kern[i])
anal=rbind(anal[1:(i-1),],
rep('*',ncol(anal)),
anal[i:(nrow(anal)),])
}
}
cbind(head(kern,10),head(anal,10))
cbind(head(kern,15),head(anal,15))
header=readLines('anal',n=N)
kern=read.delim('score',header=F,as.is=T)[,1]
anal=read.delim('anal',header=F,skip=N,as.is=T)
kern=kern[grep('!!linebreak',kern,invert=T)]
kern
IV=rbeta(2000,1,1)*100
IV
Bs=matrix(rbeta(10,1,1)*10,10,1)
Bs
IV %*% Bs
IV %*% t(Bs)
dim(IV %*% t(Bs))
As=matrix(sample(-2:2,10,replace=T)
Bs=matrix(rbeta(10,1,1)*10*sample(c(-1,1),10,replace=T),1,10)
As=matrix(sample(-2:2,10,replace=T,10,1)
Bs=matrix(rbeta(10,1,1)*10*sample(c(-1,1),10,replace=T),1,10)
As=matrix(sample(-2:2,10,replace=T),10,1)
Bs=matrix(rbeta(10,1,1)*10*sample(c(-1,1),10,replace=T),1,10)
As
Bs
DVs.logit=IV%*%Bs
Dvs.logit
DVs.logit
DVs.logit+As
source('~/.active-rstudio-document', echo=TRUE)
DVs
DVs.logit
Bs
Bs=matrix(rbeta(10,10,1)*sample(c(-1,1),10,replace=T),1,10)
Bs
Bs=matrix(rbeta(10,1,10)*sample(c(-1,1),10,replace=T),1,10)
Bs
Bs=matrix(rbeta(10,1,4)*sample(c(-1,1),10,replace=T),1,10)
Bs
source('~/.active-rstudio-document', echo=TRUE)
logit2p(DVs.logit)
source('~/.active-rstudio-document', echo=TRUE)
DVs
LLfunc=function(par){
yhat=IV%*%par
LL=0
for(i in 1:10){
LL=LL+sum(dbinom(DV[,i],1,yhat[,i],log=T))
}
return(LL)
}
LLfunc(c(0,0,0,0,0,0,0,0,0,0))
str(IV)
LLfunc(c(0,0,0,0,0,0,0,0,0,0))
LLfunc=function(par){
yhat=IV%*%matrix(par,1,10)
LL=0
for(i in 1:10){
LL=LL+sum(dbinom(DV[,i],1,yhat[,i],log=T))
}
return(LL)
}
LLfunc(c(0,0,0,0,0,0,0,0,0,0))
LLfunc=function(par){
yhat=IV%*%matrix(par,1,10)
LL=0
for(i in 1:10){
LL=LL+sum(dbinom(DVs[,i],1,yhat[,i],log=T))
}
return(LL)
}
LLfunc(c(0,0,0,0,0,0,0,0,0,0))
LLfunc(Bs
)
)
LLfunc(Bs)
DVs[,1]
LLfunc=function(par){
yhat=logit2p(IV%*%matrix(par,1,10))
LL=0
for(i in 1:10){
LL=LL+sum(dbinom(DVs[,i],1,yhat[,i],log=T))
}
return(LL)
}
LLfunc(Bs)
LLfunc(c(0,0,0,0,0,0,0,0,0,0))
LLfunc(Bs)
source('~/Bridge/Research/Tools/MyMetro.R', echo=TRUE)
source('~/Bridge/Research/Tools/MyMetro.R', echo=TRUE)
fit=My.metro(LLfunc,c(0,0,0,0,0,0,0,0,0,0),iterations=100000,burnin=40000,thin=10)
fit=My.metro(LLfunc,c(0,0,0,0,0,0,0,0,0,0),iterations=10000,burnin=1000,thin=1)
fit
X11()
fit$Trace[,1]
plot(fit$Trace[,1])
plot(fit$Trace[,2])
plot(fit$Trace[,3])
plot(fit$Trace[,4])
plot(fit$Trace[,5])
plot(fit$Trace[,6])
plot(fit$Trace[,7])
plot(fit$Trace[,8])
plot(fit$Trace[,9])
plot(fit$Trace[,10])
fit=My.metro(LLfunc,c(0,0,0,0,0,0,0,0,0,0),iterations=30000,burnin=10000,thin=1)
fit=My.metro(LLfunc,c(0,0,0,0,0,0,0,0,0,0),plot=T,iterations=30000,burnin=10000,thin=1)
fit=My.metro(LLfunc,c(0,0,0,0,0,0,0,0,0,0),plot=T,iterations=100000,burnin=50000,thin=10)
DVs
as.vector(DVs)
LLfunc=function(par){
yhat=as.vector(logit2p(IV%*%matrix(par,1,10)))
LL=sum(dbinom(as.vector(DVs),1,yhat,log=T))
return(LL)
}
fit=My.metro(LLfunc,c(0,0,0,0,0,0,0,0,0,0),plot=T,iterations=100000,burnin=50000,thin=10)
clear()
fit$Means
Bs
plot(fit$Means,Bs)
for(i in 1:10) DVs.logit[,i]=DVs.logit[,i]+As[i]+matrix(rnorm(2000*10,0,20),2000,10)
DVs=IV%*%Bs+matrix(rnorm(2000*10,0,20),2000,10)
for(i in 1:10) DVs.logit[,i]=DVs.logit[,i]+As[i]
LLfunc=function(par){
yhat=as.vector(IV%*%matrix(par[1:10],1,10))
LL=sum(dnorm(as.vector(DVs),yhat,rep(par[11:20],each=2000),log=T))
return(LL)
}
source('~/.active-rstudio-document', echo=TRUE)
clear()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
fit$Means
Bs
fit1=lm(DV~IV)
fit1=lm(DVs~IV)
summary(fit1)
coef(fit1)
fit$Means
fit$MaxLL
setwd("~/Dropbox/laitzProject/Variations/Composers/Mozart/K501")
read.delim('En')
read.table('En')
readLines('En')
x=readLines('En')
x
grep('^!!!',invert=T,x)
grep('^!!!',invert=T,x,value=T)
source('~/.active-rstudio-document', echo=TRUE)
Data
strsplit(Data,split='\t')
data.frame(strsplit(Data,split='\t'))
do.call('rbind',strsplit(Data,split='\t'))
source('~/.active-rstudio-document', echo=TRUE)
x=readLines('En')
Com.Ind=grep('^!!!',x)
Data.Ind=grep('^!!!',x,invert=T)
Data=grep('^!!!',x,invert=T,value=T)
do.call('rbind',strsplit(Data,split='\t'))
lapply(strsplit(Data,split='\t'),length)
unlist(lapply(strsplit(Data,split='\t'),length))
do.call('rbind',strsplit(Data,split='\t'))
Data[,1]
Data=do.call('rbind',strsplit(Data,split='\t'))
Data[,1]
gsub('[a-zA-Z].*','',Data[,1])
gsub('[*=-]','',gsub('[a-zA-Z].*','',Data[,1]))
gsub('[*=-)()]','',gsub('[a-zA-Z].*','',Data[,1]))
gsub('[*=-)(]','',gsub('[a-zA-Z].*','',Data[,1]))
gsub('[*=-\\)\\(]','',gsub('[a-zA-Z].*','',Data[,1]))
gsub('[*=\\-\\)\\(]','',gsub('[a-zA-Z].*','',Data[,1]))
gsub('[*=_\\-\\)\\(]','',gsub('[a-zA-Z].*','',Data[,1]))
gsub('[*=_\\\\-\\)\\(]','',gsub('[a-zA-Z].*','',Data[,1]))
gsub('-','',gsub('[*=\\)\\(]','',gsub('[a-zA-Z].*','',Data[,1])))
Rhythm=gsub('-','',gsub('[*=\\)\\(]','',gsub('[a-zA-Z].*','',Data[,1])))
cbind(Rhythm,Data)
paste(Rhythm,Data[,2],sep='')
Data[,2]=paste(Rhythm,Data[,2],sep='')
Data[,3]=paste(Rhythm,Data[,3],sep='')
Data
getwd()
source('~/.active-rstudio-document', echo=TRUE)
Data
x=readLines('En')
Com.Ind=grep('^!!!',x)
Data.Ind=grep('^!!!',x,invert=T)
Data=grep('^!!!',x,invert=T,value=T)
Data=do.call('rbind',strsplit(Data,split='\t'))
Rhythm=gsub('-','',gsub('[*=\\)\\(]','',gsub('[a-zA-Z].*','',Data[,1])))
Data
table(Data[,2])
source('~/.active-rstudio-document', echo=TRUE)
Data
source('~/.active-rstudio-document', echo=TRUE)
Data
Com.ind
Com.Ind
write.table(x[1],'Test')
write.table(x[1],'Test',quote=F,row.names=F,col.names=F)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Data[k,]
k
Data[2,]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
write.table('s',quote=F,col.names=F,row.names=F)
write.table('s','Test',quote=F,col.names=F,row.names=F)
write.table(c('s','2'),'Test',quote=F,col.names=F,row.names=F,append=T)
write.table(c('s','2'),'Test',quote=F,col.names=F,row.names=F,append=T,sep='\t')
paste(Data[4,],'\t',sep='')
paste(Data[4,],'\t',collape='')
paste(Data[4,],'\t',collapse='')
every.other(Data[4,],'\t')
head(every.other(Data[4,],'\t'),-1)
paste(head(every.other(Data[4,],'\t'),-1),sep='')
paste(head(every.other(Data[4,],'\t'),-1),collapse='')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Data
Data.ind
Data.Ind
x[Data.Ind]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
spread.rhythm('En')
